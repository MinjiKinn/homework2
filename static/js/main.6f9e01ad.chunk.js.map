{"version":3,"sources":["logo.svg","img/background-pic.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","rel","href","integrity","crossorigin","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,kCCA3CD,EAAOC,QAAU,IAA0B,4C,8FC0D5BC,MArDf,WACE,OACE,yBAAKC,UAAU,OAGb,4BAAQA,UAAU,cAChB,0BAAMC,IAAI,aAAaC,KAAK,kFAAkFC,UAAU,0EAA0EC,YAAY,eAE9M,yBAAKJ,UAAU,aACf,yBAAKA,UAAU,SACb,uBAAGA,UAAU,YAAb,8CACA,uBAAGA,UAAU,aAAb,qBAA4B,0BAAMA,UAAU,OAAhB,QAE9B,yBAAKA,UAAU,QACb,uBAAGA,UAAU,SAAb,4EACA,uBAAGA,UAAU,SAAb,+EACA,uBAAGA,UAAU,SAAb,6DAEF,yBAAKA,UAAU,aACb,uBAAGA,UAAU,QAAb,gBACA,uBAAGA,UAAU,SAAb,gBACA,uBAAGA,UAAU,SAAb,4BACA,uBAAGA,UAAU,QAAb,sBACA,uBAAGA,UAAU,SAAb,UACA,uBAAGA,UAAU,SAAb,uBAEF,yBAAKA,UAAU,eACf,uBAAGA,UAAU,UAAb,yHAGA,yBAAKA,UAAU,QACf,uBAAGA,UAAU,UAAb,4HACA,uBAAGA,UAAU,WAAb,wIACA,uBAAGA,UAAU,UAAb,gHACA,uBAAGA,UAAU,UAAb,iFC3BYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6f9e01ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/background-pic.211d3814.png\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport background from './img/background-pic.png'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     \n\n      <header className=\"App-header\">\n        <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/5.0.0-alpha2/css/bootstrap.min.css\" integrity=\"sha384-DhY6onE6f3zzKbjUPRc2hOzGAdEf4/Dz+WJwBvEYL/lkkIsI3ihufq9hk9K4lVoK\" crossorigin=\"anonymous\"></link>\n        </header>\n        <div className=\"container\">\n        <div className=\"title\">\n          <p className=\"h4 first\">太陽光のような</p>\n          <p className=\"h1 second\">植物用<span className=\"big\">LED</span></p>\n        \n        <div className=\"note\">\n          <p className=\"intro\">室内の植物からいちごまで</p>\n          <p className=\"intro\">いろんなとこに使える賢いLED</p>\n          <p className=\"intro\">MARS HYDRO LEDを紹介します！</p>\n        </div>\n        <div className=\"functions\">\n          <p className=\"text\">家庭</p>\n          <p className=\"text2\">農家</p>\n          <p className=\"text2\">多肉植物</p>\n          <p className=\"text\">ハーブ</p>\n          <p className=\"text2\">花</p>\n          <p className=\"text2\">いちご</p>\n        </div>\n        <div className=\"h6 recomend\">\n        <p className=\"title2\">&lt;こんな問題で悩んでる方におすすめします&gt;</p>\n        </div>\n\n        <div className=\"list\">\n        <p className=\"reason\">光の量が足りなくて植物の成長が止まってる</p>\n        <p className=\"reason2\">花屋さんやカフェの中をもっと生き生きにしたい</p>\n        <p className=\"reason\">ビニールハウスでの日照量が足りてない</p>\n        <p className=\"reason\">怪しい紫色のライトが嫌い</p>\n        </div>\n        </div>\n\n\n        </div>\n        \n      \n      \n      \n    </div>\n\n\n   \n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}